@page "/todos"
@inject HttpClient Http
@inject NavigationManager NavigationManager

<h1>To Do List</h1>

<p>This component demonstrates fetching data from Database.</p>

<p>
    <a  type="button" href="/todos/0">Create</a>
</p>

@if (toDoList == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Task</th>
                <th>Status</th>
                <th>Edit</th>
                <th>Delete</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var toDoItem in toDoList)
            {
                <tr>
                    <td>@toDoItem.Task</td>
                    <td>@toDoItem.Status</td>
                    @* <td>@toDoItem.DueDate.ToShortDateString()</td> *@
                    <td><input type="button" class="btn btn-primary" value="Edit" @onclick="@(() => edit(@toDoItem.Id))" /></td>
                    <td><input type="button" class="btn btn-danger" value="Delete" @onclick="@(async () => await Delete(@toDoItem.Id))" /></td>
                </tr>
            }
        </tbody>
    </table>
}



@code {
    ToDo[] toDoList;

    protected override async Task OnInitializedAsync()
    {
        toDoList = await Http.GetJsonAsync<ToDo[]>("https://localhost:44327/api/ToDoes");
    }



    void edit(int id)
    {
         NavigationManager.NavigateTo("/todos/" + id);
    }

    protected async Task Delete(int id)
    {
        await Http.DeleteAsync("https://localhost:44327/api/ToDoes/" + Convert.ToInt64(id));
    }

}